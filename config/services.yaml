services:
  packageConfig.model:
    class: \EvilStudio\ComposerParser\Model\PackageConfig
    arguments:
      includeInstalledVersion: "@=container.getParameter('package.config')['includeInstalledVersion']"
      installedVersionDisplayedIn: "@=container.getParameter('package.config')['installedVersionDisplayedIn']"
      repositoriesConfig: "@=container.getParameter('package.config')['packageGroups']"

  repositoryList.model:
    class: \EvilStudio\ComposerParser\Model\RepositoryList
    arguments:
      repositoryList: "@=container.getParameter('repository.config')['repositoryList']"

  provider.gitRepository.service:
    class: \EvilStudio\ComposerParser\Service\Provider\GitRepository
    arguments:
      appDir: '%app.dir%'

  provider.gitlabApi.service:
    class: \EvilStudio\ComposerParser\Service\Provider\GitlabApi
    arguments:
      appDir: '%app.dir%'
      gitlabUrl: "@=container.getParameter('app.config')['gitlab']['url']"
      gitlabApiToken: "@=container.getParameter('app.config')['gitlab']['apiToken']"

  providerManager.service:
    class: \EvilStudio\ComposerParser\Service\Provider\ProviderManager
    arguments:
      providerType: "@=container.getParameter('app.config')['providerType']"
      providers:
        gitRepository: '@provider.gitRepository.service'
        gitlabApi: '@provider.gitlabApi.service'

  parser.composerJsonAndLock.service:
    class: \EvilStudio\ComposerParser\Service\Parser\ComposerJsonAndLock
    arguments:
      packageConfig: '@packageConfig.model'
      repositoryList: '@repositoryList.model'
      providerManager: '@providerManager.service'

  parserManager.service:
    class: \EvilStudio\ComposerParser\Service\Parser\ParserManager
    arguments:
      parserType: "@=container.getParameter('app.config')['parserType']"
      parsers:
        composerJsonAndLock: '@parser.composerJsonAndLock.service'

  writer.xlsx.service:
    class: \EvilStudio\ComposerParser\Service\Writer\Xlsx
    arguments:
      fileName: "@=container.getParameter('writer.config')['local']['fileName']"
      fileDirectory: "@=container.getParameter('writer.config')['local']['fileDirectory']"
      packageConfig: '@packageConfig.model'

  writerManager.service:
    class: \EvilStudio\ComposerParser\Service\Writer\WriterManager
    arguments:
      writerType: "@=container.getParameter('app.config')['writerType']"
      writers:
        xlsx: '@writer.xlsx.service'

  cleaner.service:
    class: \EvilStudio\ComposerParser\Service\Cleaner
    arguments:
      repositoryList: '@repositoryList.model'